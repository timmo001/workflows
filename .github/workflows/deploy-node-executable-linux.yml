name: Deploy Linux

# yamllint disable-line rule:truthy
on:
  workflow_call:
    secrets:
      CONTAINER_SLUG:
        required: true

jobs:
  information:
    if: |
      github.event_name == 'release'
      || (
        github.event_name == 'workflow_run'
        && github.event.workflow_run.conclusion == 'success'
      )
    name: ‚ÑπÔ∏è Gather container information
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.release.outputs.environment }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4.2.2
      - name: ‚ÑπÔ∏è Gather version and environment
        id: release
        run: |
          sha="${{ github.sha }}"
          environment="edge"
          version="${sha:0:7}"
          if [[ "${{ github.event_name }}" = "release" ]]; then
            version="${{ github.event.release.tag_name }}"
            version="${version,,}"
            version="${version#v}"
            environment="stable"
            if [[ "${{ github.event.release.prerelease }}" = "true" ]]; then
              environment="beta"
            fi
          fi
          echo "::set-output name=environment::${environment}"
          echo "::set-output name=version::${version}"
  deploy:
    name: üë∑ Build & Deploy ${{ matrix.architecture }}
    needs: information
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture:
          - amd64
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4.2.2
      - name: ‚§µÔ∏è Download Artifact - deb
        uses: dawidd6/action-download-artifact@v9
        with:
          name: linux-deb
          workflow: build-linux.yml
          workflow_conclusion: success
      - name: üèóÔ∏è Set up build cache
        id: cache
        uses: actions/cache@v4
        with:
          path: /tmp/.docker-cache
          key: docker-${{ github.ref }}-${{ matrix.architecture }}-${{ github.sha }}
          restore-keys: |
            docker-${{ github.ref }}-${{ matrix.architecture }}
      - name: üèóÔ∏è Set up QEMU
        uses: docker/setup-qemu-action@v3.5.0
      - name: üèóÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.9.0
      - name: ‚ÑπÔ∏è Compose build flags
        id: flags
        run: |
          echo "::set-output name=date::$(date +"%Y-%m-%dT%H:%M:%SZ")"
          from=$(jq --raw-output ".build_from.${{ matrix.architecture }}" "build.json")
          echo "::set-output name=from::${from}"
          if [[ "${{ matrix.architecture}}" = "amd64" ]]; then
            echo "::set-output name=platform::linux/amd64"
          else
            echo "::error ::Could not determine platform for architecture ${{ matrix.architecture }}"
            exit 1
          fi
      - name: üèóÔ∏è Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: üöÄ Build and push
        uses: docker/build-push-action@v6.14.0
        with:
          push: true
          # yamllint disable rule:line-length
          tags: |
            ghcr.io/timmo001/${{ secrets.CONTAINER_SLUG }}/${{ matrix.architecture }}:${{ needs.information.outputs.environment }}
            ghcr.io/timmo001/${{ secrets.CONTAINER_SLUG }}/${{ matrix.architecture }}:${{ needs.information.outputs.version }}
          # yamllint enable rule:line-length
          context: .
          file: ./Dockerfile
          cache-from: |
            type=local,src=/tmp/.docker-cache
            ghcr.io/timmo001/${{ secrets.CONTAINER_SLUG }}/${{ matrix.architecture }}:edge
          cache-to: type=local,mode=max,dest=/tmp/.docker-cache
          platforms: ${{ steps.flags.outputs.platform }}
          build-args: |
            BUILD_ARCH=${{ matrix.architecture }}
            BUILD_DATE=${{ steps.flags.outputs.date }}
            BUILD_FROM=${{ steps.flags.outputs.from }}
            BUILD_REF=${{ github.sha }}
            BUILD_REPOSITORY=${{ github.repository }}
            BUILD_VERSION=${{ needs.information.outputs.version }}
  deploy-output:
    name: üë∑ Deploy Output to Release Assets
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: ‚§µÔ∏è Download Artifact - linux-out
        uses: dawidd6/action-download-artifact@v9
        with:
          name: linux-out
          path: linux-out
          workflow: build-linux.yml
          workflow_conclusion: success
      - name: üèóÔ∏è Compress directories
        run: |
          tar -czvf linux-out.tar.gz linux-out/*
      - name: ‚¨ÜÔ∏è Upload Artifacts to Release Assets
        uses: fnkr/github-action-ghr@v1.3
        env:
          GHR_PATH: linux-out.tar.gz
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GHR_REPLACE: true
  deploy-packages:
    name: üë∑ Deploy Packages to Release Assets
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      fail-fast: false
      matrix:
        artifact:
          - linux-apk
          - linux-deb
          - linux-rpm
    steps:
      - name: ‚§µÔ∏è Download Artifact - ${{ matrix.artifact }}
        uses: dawidd6/action-download-artifact@v9
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.artifact }}
          workflow: build-linux.yml
          workflow_conclusion: success
      - name: ‚¨ÜÔ∏è Upload to Release Assets
        uses: fnkr/github-action-ghr@v1.3
        env:
          GHR_PATH: ${{ matrix.artifact }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GHR_REPLACE: true
