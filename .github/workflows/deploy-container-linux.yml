---
name: Deploy Container Linux

# yamllint disable-line rule:truthy
on:
  workflow_call:
    inputs:
      architecture:
        required: true
        type: string
      container-slug:
        required: true
        type: string

jobs:
  information:
    name: ℹ️ Gather container information
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.release.outputs.environment }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      - name: ℹ️ Gather version and environment
        id: release
        run: |
          sha="${{ github.sha }}"
          environment="edge"
          version="${sha:0:7}"
          if [[ "${{ github.event_name }}" = "release" ]]; then
            version="${{ github.event.release.tag_name }}"
            version="${version,,}"
            version="${version#v}"
            environment="stable"
            if [[ "${{ github.event.release.prerelease }}" = "true" ]]; then
              environment="beta"
            fi
          fi
          echo "::set-output name=environment::${environment}"
          echo "::set-output name=version::${version}"
  deploy:
    name: 👷 Build & Deploy ${{ inputs.architecture }}
    needs: information
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      - name: 🏗 Set up build cache
        id: cache
        uses: actions/cache@v3.3.1
        with:
          path: /tmp/.docker-cache
          key: docker-${{ github.ref }}-${{ inputs.architecture }}-${{ github.sha }}
          restore-keys: |
            docker-${{ github.ref }}-${{ inputs.architecture }}
      - name: 🏗 Set up QEMU
        uses: docker/setup-qemu-action@v2.2.0
      - name: 🏗 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.10.0
      - name: ℹ️ Compose build flags
        id: flags
        run: |
          echo "::set-output name=date::$(date +"%Y-%m-%dT%H:%M:%SZ")"
          from=$(yq --no-colors eval ".build_from.${{ inputs.architecture }}" "build.json")
          echo "::set-output name=from::${from}"
          if [[ "${{ inputs.architecture}}" = "amd64" ]]; then
            echo "::set-output name=platform::linux/amd64"
          elif [[ "${{ inputs.architecture }}" = "i386" ]]; then
            echo "::set-output name=platform::linux/386"
          elif [[ "${{ inputs.architecture }}" = "armhf" ]]; then
            echo "::set-output name=platform::linux/arm/v6"
          elif [[ "${{ inputs.architecture }}" = "armv7" ]]; then
            echo "::set-output name=platform::linux/arm/v7"
          elif [[ "${{ inputs.architecture }}" = "aarch64" ]]; then
            echo "::set-output name=platform::linux/arm64/v8"
          else
            echo "::error ::Could not determine platform for architecture ${{ inputs.architecture }}"
            exit 1
          fi
      - name: 🏗 Login to GitHub Container Registry
        uses: docker/login-action@v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: 🚀 Build and push
        uses: docker/build-push-action@v4.1.1
        with:
          push: true
          # yamllint disable rule:line-length
          tags: |
            ghcr.io/timmo001/${{ inputs.container-slug }}/${{ inputs.architecture }}:${{ needs.information.outputs.environment }}
            ghcr.io/timmo001/${{ inputs.container-slug }}/${{ inputs.architecture }}:${{ needs.information.outputs.version }}
          # yamllint enable rule:line-length
          context: .
          file: ./Dockerfile
          cache-from: |
            type=local,src=/tmp/.docker-cache
            ghcr.io/timmo001/${{ inputs.container-slug }}/${{ inputs.architecture }}:edge
          cache-to: type=local,mode=max,dest=/tmp/.docker-cache
          platforms: ${{ steps.flags.outputs.platform }}
          build-args: |
            BUILD_ARCH=${{ inputs.architecture }}
            BUILD_DATE=${{ steps.flags.outputs.date }}
            BUILD_FROM=${{ steps.flags.outputs.from }}
            BUILD_REF=${{ github.sha }}
            BUILD_REPOSITORY=${{ github.repository }}
            BUILD_VERSION=${{ needs.information.outputs.version }}
      - name: 🚀 Output message
        run: |
          echo "Successfully deployed ghcr.io/timmo001/${{ inputs.container-slug }}/${{ inputs.architecture }}:${{ needs.information.outputs.version }}" >> $GITHUB_STEP_SUMMARY
